{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/HumanSolver.ts","webpack:///./src/backtracker.ts","webpack:///./src/SudokuSolver.ts","webpack:///./src/web.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","HumanSolver","getLevel","universe","map","length","reduce","acc","removeRowDuplicate","forEach","row","list","set","push","index","indexOf","splice","removeColDuplicate","transposed","result","j","getTransposed","removeSquareDuplicate","squareList","_loop_1","square","Math","floor","col","x","y","getSquareList","backtracker","config","solutions","solution","getSolutionStructure","iterationId","universeCopy","JSON","parse","stringify","maxIteration","Error","strategy","possibilities","getPossibilities","pop","setSolution","checkSolution","max","resetSolution","resetPossibilities","__assign","this","assign","t","arguments","backtracker_1","HumanSolver_1","a19","Array","fill","popRand","array","random","getXY","checkGrid","grid","checkRow","checkCol","slice","concat","checkSquare","_a","SudokuSolver","generate","naiveCarve","total","g","i_1","checkOneSolution","console","log","humanSolve","config2","carve","btcarve","carvedGrid_1","config_1","last","findIndex","e","message","state_1","SudokuSolver_1","window"],"mappings":"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","file":"sudoku-generator.web.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction getSquareList(universe) {\r\n    var result = [];\r\n    var _loop_1 = function (i) {\r\n        var square = [];\r\n        var row = Math.floor(i / 3);\r\n        var col = i % 3;\r\n        [0, 1, 2].forEach(function (x) { return [0, 1, 2].forEach(function (y) { return square.push(universe[row + x][col + y]); }); });\r\n        result.push(square);\r\n    };\r\n    for (var i = 0; i < 9; i++) {\r\n        _loop_1(i);\r\n    }\r\n    return result;\r\n}\r\nfunction getTransposed(universe) {\r\n    var result = [];\r\n    for (var i = 0; i < 9; i++) {\r\n        var row = [];\r\n        for (var j = 0; j < 9; j++) {\r\n            row.push(universe[j][i]);\r\n        }\r\n        result.push(row);\r\n    }\r\n    return result;\r\n}\r\nvar HumanSolver = /** @class */ (function () {\r\n    function HumanSolver() {\r\n    }\r\n    HumanSolver.getLevel = function (universe) {\r\n        return universe.map(function (r) { return r.map(function (c) { return c.length; }).reduce(function (acc, n) { return acc + n; }, 0); }).reduce(function (acc, n) { return acc + n; }, 0);\r\n    };\r\n    HumanSolver.removeRowDuplicate = function (universe) {\r\n        universe.forEach(function (row) {\r\n            var list = row.reduce(function (acc, set) {\r\n                if (set.length === 1) {\r\n                    acc.push(set[0]);\r\n                }\r\n                return acc;\r\n            }, []);\r\n            row.forEach(function (set) {\r\n                if (set.length > 1) {\r\n                    list.forEach(function (n) {\r\n                        var index = set.indexOf(n);\r\n                        if (index !== -1) {\r\n                            set.splice(index, 1);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    };\r\n    HumanSolver.removeColDuplicate = function (universe) {\r\n        var transposed = getTransposed(universe);\r\n        HumanSolver.removeRowDuplicate(transposed);\r\n    };\r\n    HumanSolver.removeSquareDuplicate = function (universe) {\r\n        var squareList = getSquareList(universe);\r\n        HumanSolver.removeRowDuplicate(squareList);\r\n    };\r\n    return HumanSolver;\r\n}());\r\nexports.HumanSolver = HumanSolver;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction backtracker(config) {\r\n    var solutions = [];\r\n    var solution = config.getSolutionStructure();\r\n    var iterationId = 0;\r\n    var i = 0;\r\n    var universe = config.universe;\r\n    var universeCopy = JSON.parse(JSON.stringify(config.universe));\r\n    while (true) {\r\n        iterationId++;\r\n        if (config.maxIteration > 0 && iterationId > config.maxIteration) {\r\n            throw new Error('maxIteration reached.');\r\n        }\r\n        if (i === -1) {\r\n            if (config.strategy === 'find-all') {\r\n                break;\r\n            }\r\n            throw new Error('it seems that the backtracking cannot find a solution.');\r\n        }\r\n        var possibilities = config.getPossibilities(universe, i);\r\n        if (possibilities.length === 0) {\r\n            config.resetSolution(solution, i);\r\n            config.resetPossibilities(possibilities, i, universeCopy);\r\n            i--;\r\n            continue;\r\n        }\r\n        var n = config.pop(possibilities);\r\n        config.setSolution(solution, i, n);\r\n        var status_1 = config.checkSolution(solution, i);\r\n        if (status_1) {\r\n            i++;\r\n        }\r\n        else {\r\n            continue;\r\n        }\r\n        if (i === config.length) {\r\n            if (config.strategy === 'find-first') {\r\n                break;\r\n            }\r\n            if (config.strategy === 'find-all') {\r\n                var s = JSON.parse(JSON.stringify(solution));\r\n                solutions.push(s);\r\n                if (solutions.length >= config.max) {\r\n                    break;\r\n                }\r\n                i--;\r\n                continue;\r\n            }\r\n        }\r\n    }\r\n    if (config.strategy === 'find-first') {\r\n        return solution;\r\n    }\r\n    if (config.strategy === 'find-all') {\r\n        return solutions;\r\n    }\r\n}\r\nexports.backtracker = backtracker;\r\n","\"use strict\";\r\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n            t[p] = s[p];\r\n    }\r\n    return t;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar backtracker_1 = require(\"./backtracker\");\r\nvar HumanSolver_1 = require(\"./HumanSolver\");\r\nvar a19 = function () { return new Array(9).fill(0).map(function (n, i) { return i + 1; }); };\r\nfunction popRand(array) {\r\n    if (array.length === 0) {\r\n        throw new Error('cannot pop from an empty array');\r\n    }\r\n    var index = Math.floor(Math.random() * array.length);\r\n    var result = array[index];\r\n    array.splice(index, 1);\r\n    return result;\r\n}\r\nfunction initGrid() {\r\n    return new Array(9).fill(0).map(function () { return new Array(9).fill(0); });\r\n}\r\nfunction getXY(n) {\r\n    return {\r\n        x: Math.floor(n / 9),\r\n        y: n % 9\r\n    };\r\n}\r\nfunction checkGrid(grid, x, y) {\r\n    return checkRow(grid, x, y) && checkCol(grid, x, y) && checkSquare(grid, x, y);\r\n}\r\nfunction checkRow(grid, x, y) {\r\n    return grid[x].indexOf(grid[x][y]) === y;\r\n}\r\nfunction checkCol(grid, x, y) {\r\n    var column = grid.map(function (row) { return row[y]; });\r\n    return column.indexOf(grid[x][y]) === x;\r\n}\r\nfunction checkSquare(grid, x, y) {\r\n    var n = grid[x][y];\r\n    var i = Math.floor(x / 3);\r\n    var j = Math.floor(y / 3);\r\n    var square = grid.slice(i * 3, i * 3 + 3).map(function (row) { return row.slice(j * 3, j * 3 + 3); });\r\n    square[x % 3][y % 3] = 0;\r\n    var flat = square.reduce(function (acc, row) { return acc.concat(row); }, []);\r\n    return flat.indexOf(n) === -1;\r\n}\r\nvar config = {\r\n    getSolutionStructure: initGrid,\r\n    universe: new Array(9).fill(0).map(function () { return new Array(9).fill(0).map(a19); }),\r\n    getPossibilities: function (universe, i) {\r\n        var _a = getXY(i), x = _a.x, y = _a.y;\r\n        return universe[x][y];\r\n    },\r\n    resetPossibilities: function (possibilities, i, universeCopy) {\r\n        var _a = getXY(i), x = _a.x, y = _a.y;\r\n        var origPossibilities = universeCopy[x][y];\r\n        origPossibilities.forEach(function (n) { return possibilities.push(n); });\r\n    },\r\n    resetSolution: function (solution, i) {\r\n        var _a = getXY(i), x = _a.x, y = _a.y;\r\n        solution[x][y] = 0;\r\n    },\r\n    setSolution: function (solution, i, n) {\r\n        var _a = getXY(i), x = _a.x, y = _a.y;\r\n        solution[x][y] = n;\r\n    },\r\n    checkSolution: function (solution, i) {\r\n        var _a = getXY(i), x = _a.x, y = _a.y;\r\n        return checkGrid(solution, x, y);\r\n    },\r\n    pop: function (possibilities) {\r\n        return popRand(possibilities);\r\n        // return possibilities.shift();\r\n    },\r\n    strategy: 'find-first',\r\n    max: 2,\r\n    length: 81,\r\n};\r\nvar SudokuSolver = /** @class */ (function () {\r\n    function SudokuSolver() {\r\n    }\r\n    SudokuSolver.generate = function () {\r\n        config.universe = new Array(9).fill(0).map(function () { return new Array(9).fill(0).map(a19); });\r\n        return backtracker_1.backtracker(config);\r\n    };\r\n    SudokuSolver.naiveCarve = function (grid, total) {\r\n        var g;\r\n        var i = 0;\r\n        while (true) {\r\n            g = JSON.parse(JSON.stringify(grid));\r\n            var array = new Array(81).fill(0).map(function (n, i) { return ({ r: Math.floor(i / 9), c: i % 9 }); });\r\n            for (var i_1 = 0; i_1 < total; i_1++) {\r\n                var _a = popRand(array), r = _a.r, c = _a.c;\r\n                g[r][c] = 0;\r\n            }\r\n            if (SudokuSolver.checkOneSolution(g)) {\r\n                break;\r\n            }\r\n            i++;\r\n        }\r\n        console.log('found in %d iterations', i);\r\n        return g;\r\n    };\r\n    SudokuSolver.checkOneSolution = function (grid) {\r\n        var universe = grid.map(function (row) { return row.map(function (col) {\r\n            if (col === 0) {\r\n                return new Array(9).fill(0).map(function (n, i) { return i + 1; });\r\n            }\r\n            return [col];\r\n        }); });\r\n        SudokuSolver.humanSolve(universe);\r\n        SudokuSolver.humanSolve(universe);\r\n        SudokuSolver.humanSolve(universe);\r\n        SudokuSolver.humanSolve(universe);\r\n        var config2 = __assign({}, config, { universe: universe, strategy: 'find-all', max: 2, length: 81 });\r\n        var result = backtracker_1.backtracker(config2).length === 1;\r\n        return result;\r\n    };\r\n    SudokuSolver.humanSolve = function (universe) {\r\n        // console.log('universe level before', HumanSolver.getLevel(universe));\r\n        HumanSolver_1.HumanSolver.removeRowDuplicate(universe);\r\n        HumanSolver_1.HumanSolver.removeColDuplicate(universe);\r\n        HumanSolver_1.HumanSolver.removeSquareDuplicate(universe);\r\n        // console.log('universe level after', HumanSolver.getLevel(universe));\r\n    };\r\n    SudokuSolver.carve = function (grid, total) {\r\n        return SudokuSolver.btcarve(grid, total);\r\n    };\r\n    SudokuSolver.btcarve = function (grid, total) {\r\n        var _loop_1 = function () {\r\n            try {\r\n                var carvedGrid_1;\r\n                // perform a backtracking on carve.\r\n                var universe = new Array(total).fill(0).map(function () { return new Array(81).fill(0).map(function (n, i) { return ({ row: Math.floor(i / 9), col: i % 9 }); }); });\r\n                var config_1 = {\r\n                    getSolutionStructure: function () { return []; },\r\n                    universe: universe,\r\n                    getPossibilities: function (universe, i) {\r\n                        return universe[i];\r\n                    },\r\n                    resetPossibilities: function (possibilities, i, universeCopy) {\r\n                        var origPossibilities = universeCopy[i];\r\n                        origPossibilities.forEach(function (n) { return possibilities.push(n); });\r\n                    },\r\n                    resetSolution: function (solution, i) {\r\n                        solution.pop();\r\n                    },\r\n                    setSolution: function (solution, i, n) {\r\n                        if (solution.length === i) {\r\n                            solution[i - 1] = n;\r\n                            return;\r\n                        }\r\n                        if (solution.length === i - 1) {\r\n                            solution.push(n);\r\n                            return;\r\n                        }\r\n                    },\r\n                    checkSolution: function (solution, i) {\r\n                        // check if the last item is not equals to an existing one.\r\n                        var last = solution[i - 1];\r\n                        if (solution.findIndex(function (p) { return p.row === last.row && p.col === last.col; }) !== i - 1) {\r\n                            return false;\r\n                        }\r\n                        carvedGrid_1 = JSON.parse(JSON.stringify(grid));\r\n                        solution.forEach(function (p) {\r\n                            carvedGrid_1[p.row][p.col] = 0;\r\n                        });\r\n                        return SudokuSolver.checkOneSolution(carvedGrid_1);\r\n                    },\r\n                    pop: function (possibilities) {\r\n                        var result = popRand(possibilities);\r\n                        return result;\r\n                    },\r\n                    strategy: 'find-first',\r\n                    maxIteration: 500,\r\n                    length: total,\r\n                };\r\n                var solution = backtracker_1.backtracker(config_1);\r\n                return { value: carvedGrid_1 };\r\n            }\r\n            catch (e) {\r\n                console.log('e', e.message);\r\n            }\r\n        };\r\n        while (true) {\r\n            var state_1 = _loop_1();\r\n            if (typeof state_1 === \"object\")\r\n                return state_1.value;\r\n        }\r\n    };\r\n    return SudokuSolver;\r\n}());\r\nexports.SudokuSolver = SudokuSolver;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar SudokuSolver_1 = require(\"./SudokuSolver\");\r\nwindow['SudokuSolver'] = SudokuSolver_1.SudokuSolver;\r\n"],"sourceRoot":""}